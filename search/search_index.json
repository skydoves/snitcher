{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>\ud83e\udd89 Snitcher captures global crashes, enabling easy redirection to the exception tracing screen for swift recovery.</p>"},{"location":"#what-is-snitcher","title":"What is Snitcher?","text":"<p>Snitcher offers versatile advantages such as aiding in debugging crashes during development, facilitating easy sharing of exceptions by your QA team, enhancing user experiences with recovery screens instead of abrupt closures, and enabling global exception tracing and customized launch behaviors tailored to your specific needs. You have the complete freedom to customize the crash tracing screens according to your build types and preferences, reporting to the Firebase's Crashlytics with displaying the exception screen, including options like launching a designated Activity, sending messages to your BroadcastReceiver, or any other desired actions.</p>"},{"location":"#download","title":"Download","text":""},{"location":"#gradle","title":"Gradle","text":"<p>Add the dependency below to your module's <code>build.gradle</code> file:</p> GroovyKTS <pre><code>dependencies {\nimplementation \"com.github.skydoves:snitcher:$version\"\n}\n</code></pre> <pre><code>dependencies {\nimplementation(\"com.github.skydoves:snitcher:$version\")\n}\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Installing Snitcher is a breeze; it hooks into global exceptions, replacing application closure with informative exception tracing screens. You can seamlessly install Snitcher using the following example:</p> <pre><code>class App : Application() {\n\noverride fun onCreate() {\nsuper.onCreate()\n\nSnitcher.install(application = this)\n}\n}\n</code></pre> <p>Upon completing the project build, in the event of encountering any exceptions, you will be presented with the screens illustrated below, tailored to your specific build types, rather than experiencing an abrupt application closure:</p> Debug Release"},{"location":"custom-build-type/","title":"Build Types","text":"<p>If you intend to launch distinct trace activities and implement different behaviors or flavors, you can install Snitcher based on specific build types, as shown in the example below:</p> <pre><code>Snitcher.install(\napplication = this,\ntraceActivity = if (BuildConfig.DEBUG) {\nMyExceptionTraceActivity::class\n} else {\nRestoreActivity::class\n},\nexceptionHandler = {\nif (!BuildConfig.DEBUG) {\nFirebase.crashlytics.log(exception.stackTrace)\n}\n}\n)\n</code></pre> <p>Alternatively, you can create a single trace Activity and manage the different build types within the activity itself, as demonstrated in the example below:</p> <pre><code>Snitcher.install(\napplication = this,\nlauncher = MyExceptionTraceActivity::class,\n)\n\nclass MyExceptionTraceActivity : ComponentActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\n\nsetContent {\nval exception by Snitcher.exception.collectAsState()\nval launcher by Snitcher.launcher.collectAsState()\n\nSnitcherTheme {\nif (exception != null) {\nif (Snitcher.isDebuggable) {\nExceptionTraceScreen(\nlauncher = launcher,\nsnitcherException = exception!!,\n)\n} else {\nAppRestoreScreen(launcher = launcher)\n}\n}\n}\n}\n}\n}\n</code></pre> <p>As demonstrated in the above example, you have the flexibility to create your own trace or restore Activities and install them according to your various build types.</p>"},{"location":"custom-launcher-activity/","title":"Launcher (Restore) Activity","text":"<p>Furthermore, you can customize the launcher (restore activity), specifying which Activity should be executed upon restoration within the trace activity. If you don't specify a <code>launcher</code> activity, the most recent Activity that encountered a crash will automatically be launched when users press the 'restore' button. However, if you wish to launch a particular Activity instead of the most recent one, you can accomplish this by providing the launcher parameter:</p> <pre><code>Snitcher.install(\napplication = this,\nlauncher = MainActivity::class,\n)\n</code></pre>"},{"location":"custom-theme/","title":"Snitcher Theme","text":"<p>If you just want to use the pre-builts sreens, but want to customize those components, such as colors and strings, you can easily accomplish it by giving a copy of <code>SnitcherColor</code> to the <code>SnitcherTheme</code>:</p> <pre><code>SnitcherTheme(\ncolors = SnitcherTheme.colors.copy(\nprimary = Color.Blue,\nbackground = Color.White,\ntextHighEmphasis = Color.Black\n)\n) {\nif (exception != null) {\nExceptionTraceScreen(\nlauncher = launcher,\nsnitcherException = exception!!,\n)\n}\n}\n</code></pre> <p>If you wish to personalize the text strings within the pre-built UIs, you can override the following string values within your <code>strings.xml</code> file:</p> <pre><code>&lt;string name=\"snitcher_release_crash_screen_title\"&gt;Oops, Restore the previous screen?&lt;/string&gt;\n&lt;string name=\"snitcher_release_crash_screen_description\"&gt;The app crashed unexpectedly. We apologize for the inconvenience. Would you like to return to where you left off?&lt;/string&gt;\n&lt;string name=\"snitcher_release_crash_screen_restore\"&gt;Restore&lt;/string&gt;\n&lt;string name=\"snitcher_debug_crash_screen_restore\"&gt;Restore App&lt;/string&gt;\n&lt;string name=\"snitcher_debug_crash_screen_debug_on_ide\"&gt;Debug on IDE&lt;/string&gt;\n&lt;string name=\"snitcher_debug_crash_screen_stacktrace\"&gt;Stacktrace&lt;/string&gt;\n</code></pre>"},{"location":"custom-trace-screen/","title":"Exception Trace Screen","text":"<p>Snitcher provides ready-to-use exception tracing screens (such as <code>ExceptionTraceActivity</code>, built with the <code>ExceptionTraceScreen</code> Composable), giving you the flexibility to extensively tailor these screens according to your preferences, and even design your own distinct tracing interfaces. </p> <pre><code>Snitcher.install(\napplication = this,\ntraceActivity = ExceptionTraceActivity::class\n)\n</code></pre> <p>If you don't specify the <code>traceActivity</code> parameter, the default value will be <code>ExceptionTraceActivity</code>. You can tailor the launched activity by modifying the <code>traceActivity</code> parameter to match your preferred choice. The example below demonstrates the construction of a customized trace Activity:</p> <pre><code>class MyExceptionTraceActivity : ComponentActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\nsuper.onCreate(savedInstanceState)\n\nsetContent {\nval exception by Snitcher.exception.collectAsState()\nval launcher by Snitcher.launcher.collectAsState()\n\nSnitcherTheme {\nif (exception != null) {\nif (BuildConfig.DEBUG) {\n// implement your own exception trace screen\nExceptionTraceScreen(\nlauncher = launcher,\nsnitcherException = exception!!,\n)\n} else {\n// implement your own app restore screen\nAppRestoreScreen(launcher = launcher)\n}\n}\n}\n}\n}\n}\n</code></pre> <p>As demonstrated in the example above, Snitcher provides access to the <code>SnitcherException</code> and the package name of the launcher Activity. This information can be utilized to construct highly customized trace screens that align with your specific needs. Snitcher conveniently provides this information through StateFlows, allowing you to observe these values without the need for cumbersome intent handling when initiating the trace Activity.</p> <pre><code>val exception: SnitcherException? by Snitcher.exception.collectAsState()\nval launcher: String by Snitcher.launcher.collectAsState()\n</code></pre> <p>Note: Following any app crashes, you can readily observe the exception details across various components at any time and from any location.</p>"},{"location":"sponsor/","title":"Sponsor \ud83e\ude77","text":"<p>Jaewoong has created and contributed more than +70 open-source projects and libraries related to Android and Kotlin. With over his open-source projects and libraries, his work has left a significant impact on the development landscape. These projects have been widely embraced by millions of projects, software engineers, and end-users worldwide, with prominent organizations like PayPal, Twitter, Wikipedia, and others benefiting from their creations.</p> <p>If your team or personal projects have benefited from reduced development costs by using this library, you can show your appreciation and support by sponsoring him through the links below:</p> <ul> <li>GitHub Sponsor</li> <li>PayPal</li> </ul> <p>Sponsoring helps sustain the continuous development and improvement of the library, ensuring that it remains a valuable resource for the community. Your contribution not only shows gratitude but also contributes to the growth and success of open-source projects like this one. Feel free to lend your support and make a positive impact on the developer's efforts.</p> <p>If you want to suggest a feature request or sponsorship collaboration, you can reach out to the auther with the contacts below:</p> <ul> <li>skydoves2@gmail.com</li> <li>Twitter</li> </ul>"},{"location":"sponsor/#sponsors","title":"Sponsors","text":"<p>Be the first sponsor for this library!</p> <p></p>"},{"location":"trace-global-exception/","title":"Tracing Global Exceptions","text":"<p>You can trace the global exceptions by providing <code>exceptionHandler</code> lambda parameter. This can be highly beneficial if you intend to gather and report exceptions to other platforms, such as Firebase Crashlyrics.</p> <pre><code>Snitcher.install(\napplication = this,\nexceptionHandler = { exception: SnitcherException -&gt;\nFirebase.crashlytics.log(exception.stackTrace) // or exception.message, \n}\n)\n</code></pre> <p>The <code>exceptionHandler</code> gives you <code>SnitcherException</code>, encompassing the exception message, stack traces, package name, and thread information. Additionally, it enables you to recover the original <code>Throwable</code> instance with the <code>SnitcherException.throwable</code> extension.</p> <pre><code>Snitcher.install(\napplication = this,\nexceptionHandler = { exception: SnitcherException -&gt;\nval message: String = exception.message\nval stackTrace: String = exception.stackTrace\nval throwable: Throwable = exception.throwable\nval threadName: String = exception.threadName\n\n// do somethings\n}\n)\n</code></pre>"},{"location":"trace-strategy/","title":"Trace Strategy","text":"<p>You can globally trace exceptions by providing the <code>exceptionHandler</code> lambda parameter during Snitcher installation. However, there might be instances where you don't wish to launch the trace Activity but rather perform other actions, such as reporting crashes or sending messages to a <code>BroadcastReceiver</code>. In such cases, you can modify the trace strategy as shown in the example below:</p> <pre><code>Snitcher.install(\napplication = this,\ntraceStrategy = TraceStrategy.REPLACE,\nexceptionHandler = {\n// do something\n},\n)\n</code></pre> <p>In this scenario, only the <code>exceptionHandler</code> lambda function will be executed without triggering the launch of any trace Activity. If the <code>traceStrategy</code> parameter is not specified, the default behavior is set to <code>TraceStrategy.CO_WORK</code>, which involves executing the <code>exceptionHandler</code> lambda and initiating the trace activity when an app crash occurs.</p>"}]}